var getDTW = require('./dtw.js')
var NumUnistrokes = 41;
var NumPoints = 64;
var SquareSize = 250.0;
var Origin = new Point(0,0);
var Diagonal = Math.sqrt(SquareSize * SquareSize + SquareSize * SquareSize);
var HalfDiagonal = 0.5 * Diagonal;
var AngleRange = Deg2Rad(45.0);
var AnglePrecision = Deg2Rad(2.0);
var Phi = 0.5 * (-1.0 + Math.sqrt(5.0)); // Golden Ratio

function Point(x, y) // constructor
{
	this.X = x;
	this.Y = y;
}
//
// Rectangle class
//
function Rectangle(x, y, width, height) // constructor
{
	this.X = x;
	this.Y = y;
	this.Width = width;
	this.Height = height;
}
//
// Unistroke class: a unistroke template
//
function Unistroke(threshold, name, points) // constructor
{
	this.Threshold = threshold;
	this.Name = name;
	this.Points = points;
	// this.Points = Resample(points, NumPoints);
	// this.Points = ScaleTo(this.Points, SquareSize);
	// this.Points = TranslateTo(this.Points, Origin);
	this.Vector = Vectorize(this.Points); // for Protractor
}
//
// Result class
//
function Result(name, score) // constructor
{
	this.Name = name;
	this.Score = score;
}
//
// DollarRecognizer class
//
function Recognizer() // constructor
{
	//
	// one built-in unistroke per gesture type
	//
	this.Unistrokes = [];
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'RL', new Array(85.3,-219.6, 82.0,-219.3, 87.1,-230.8, 85.8,-229.2, 85.3,-227.0, 85.1,-224.6, 84.9,-222.1, 84.4,-219.7, 83.6,-217.4, 82.5,-215.2, 81.0,-213.1, 79.6,-210.8, 79.0,-208.2, 78.6,-205.5, 78.1,-202.6, 77.0,-200.0, 75.3,-197.6, 72.8,-195.4, 69.7,-193.5, 65.6,-192.3, 61.2,-191.4, 55.8,-191.0, 49.8,-190.9, 43.4,-190.8, 36.8,-190.8, 30.2,-190.9, 23.1,-191.0, 15.9,-191.1, 7.6,-190.9, -1.9,-190.3, -12.4,-189.6, -23.5,-189.2, -36.1,-188.9, -49.8,-188.6, -64.8,-187.6, -80.5,-186.4, -96.7,-185.0, -113.2,-183.6, -130.0,-182.1, -146.6,-180.6))); 
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'LR', new Array(20.2,-190.4,28.1,-189.7,32.4,-200.9,39.3,-200.4,51.3,-200.2,56.8,-200.5,63.1,-200.8,69.8,-201.2,76.9,-201.8,84.0,-202.7,89.9,-204.6,100.5,-210.3,105.5,-213.9,110.4,-217.8,115.3,-221.8,120.4,-225.8,125.6,-229.6,130.6,-233.3)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'DU', new Array(38.8,-258.0,48.2,-257.0,57.2,-255.9,66.0,-254.5,74.2,-252.8,81.1,-250.9,85.9,-248.8,88.5,-246.6,88.5,-244.3,86.9,-241.6,83.9,-238.7,80.3,-235.4,76.3,-231.7,71.5,-227.8,66.1,-223.8,60.7,-219.5,55.4,-215.0,49.7,-210.2,44.3,-205.2,32.1,-194.9,24.8,-189.7,17.0,-184.6,9.0,-179.5,-5.9,-169.3,-12.2,-164.3,-17.0,-159.2,-20.2,-154.3,-22.0,-149.4,-22.0,-144.6,-20.7,-139.8,-18.4,-135.2,-15.4,-130.6,-12.2,-126.3,-9.2,-122.1,-6.7,-118.1,-4.5,-114.3,-2.7,-110.9,0.1,-105.4,1.1,-103.5,1.9,-102.1,2.5,-101.3,3.1,-100.9,3.6,-101.0,4.0,-101.5,4.4,-102.3,4.2,-103.3,4.4,-104.5,5.0,-105.9,7.7,-107.5,12.2,-109.3,18.1,-111.1,25.3,-112.9,33.3,-114.6)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'O', new Array(-12.0,-203.4,-16.4,-200.6,-20.9,-197.8,-25.3,-195.1,-29.7,-192.4,-34.3,-189.5,-38.8,-186.5,-43.0,-183.3,-49.8,-176.7,-52.7,-173.1,-55.2,-169.3,-57.0,-165.6,-57.8,-161.8,-57.4,-158.2,-55.8,-154.6,-53.1,-151.0,-49.7,-147.6,-45.8,-144.0,-41.9,-140.4,-37.7,-136.9,-33.3,-133.5,-29.2,-130.1,-25.5,-126.7,-21.8,-123.4,-18.0,-120.4,-14.0,-117.6,-10.0,-115.1,-6.1,-112.8,-2.5,-110.8,0.7,-109.3,3.3,-108.6,5.7,-108.5,8.9,-108.7,12.5,-109.4,17.2,-110.0,22.9,-110.6,29.8,-111.2,37.5,-112.2,45.0,-114.1,52.3,-116.6,58.9,-120.1,64.9,-124.4,70.3,-129.2,75.2,-134.7,79.6,-140.4,84.0,-146.0,87.8,-151.7,90.2,-157.6,94.2,-169.1,95.2,-175.1,95.5,-181.2,95.1,-187.4,94.4,-193.2,92.8,-198.8,91.0,-203.9,88.8,-208.4,86.0,-212.6,82.7,-216.2,78.9,-219.4,74.7,-222.4,70.0,-224.9,65.1,-227.1,59.1,-229.3,52.1,-231.5,44.3,-233.8,36.0,-235.8,27.5,-237.4,19.6,-238.4,12.5,-238.8,6.2,-238.6,0.5,-237.8,-4.6,-236.4,-9.0,-234.5,-12.8,-232.0,-16.0,-229.1,-18.7,-225.7,-20.8,-222.0,-22.3,-217.8,-23.2,-213.4,-24.1,-208.6,-24.8,-203.6,-25.8,-198.4,-26.8,-193.0,-27.5,-187.6,-27.7,-182.1,-27.4,-176.7,-26.6,-171.3,-25.6,-166.0,-24.7,-160.8,-23.4,-155.9,-22.1,-151.4,-20.5,-147.4,-18.5,-144.0,-15.9,-141.3,-12.6,-139.6,-8.6,-138.8,-4.3,-139.4,0.1,-141.1,4.2,-143.7,9.3,-148.0,14.8,-153.6,21.0,-160.3,27.9,-167.8,35.2,-176.0,42.6,-184.4)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'DU', new Array(-10.6,-249.6,-2.8,-244.2,3.7,-238.2,9.1,-231.6,13.4,-224.4,16.3,-216.8,17.6,-208.7,17.2,-200.4,15.8,-191.7,13.7,-182.9,11.5,-173.9,9.6,-164.9,8.1,-156.0,7.0,-147.3,6.2,-139.0,6.0,-131.1,6.3,-123.7,6.9,-117.0,7.3,-111.1,7.4,-106.1,7.1,-102.0,6.3,-99.1,5.6,-97.2,5.2,-96.7,4.3,-98.3,2.4,-101.9,-0.3,-107.2,-3.4,-113.7,-6.9,-120.9,-10.5,-128.7)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'UD', new Array(7.6,-168.8, 5.2,-171.5, 6.5,-183.2, 6.0,-185.7, 6.3,-188.3, 7.1,-191.3, 8.8,-194.9, 10.8,-199.0, 13.1,-203.7, 15.2,-209.0, 17.1,-214.9, 18.9,-221.4, 20.3,-228.3, 21.4,-235.8, 22.0,-243.7, 22.2,-251.9, 22.1,-260.2, 21.8,-268.4, 21.3,-276.3, 20.7,-283.8, 19.9,-290.8, 19.0,-297.2))); 
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'UD', new Array(-17.8,-157.3, -19.7,-158.9, -22.2,-169.0, -25.4,-170.5, -28.8,-172.1, -32.1,-173.7, -35.3,-175.6, -38.0,-177.8, -40.5,-180.1, -42.6,-182.5, -44.3,-185.1, -45.5,-187.7, -46.3,-190.5, -47.3,-193.4, -48.3,-196.5, -49.4,-199.9, -50.7,-203.6, -52.0,-207.7, -53.2,-212.1, -54.4,-216.9, -55.7,-221.9, -57.8,-226.9, -60.6,-231.9, -63.7,-237.2, -66.8,-242.6, -69.9,-248.1, -72.7,-253.7, -75.3,-259.2, -77.9,-264.5, -80.5,-269.4, -82.9,-274.0, -86.3,-282.1, -87.7,-285.6, -88.9,-288.6, -90.1,-291.1, -91.4,-293.1)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'RL', new Array(51.6,-172.0, 41.9,-172.0, 41.0,-184.2, 32.0,-184.2, 23.6,-184.3, 15.8,-184.6, 8.6,-185.1, 1.9,-185.8, -4.5,-186.9, -11.1,-188.0, -18.0,-189.4, -25.2,-191.0, -32.5,-193.0, -39.2,-195.7, -45.4,-199.2, -51.0,-203.4, -55.8,-208.3, -60.0,-213.7, -64.0,-219.7, -68.1,-225.9, -71.9,-232.6, -74.2,-239.9, -75.1,-247.5, -74.6,-255.1, -72.3,-262.9, -68.5,-270.6, -63.1,-278.0)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'AC', new Array(31.4,-127.7,34.3,-134.9,34.5,-130.4,35.2,-126.4,35.8,-123.0,36.3,-119.9,36.7,-117.3,36.4,-115.1,35.6,-113.3,34.3,-111.7,32.8,-110.5,30.8,-109.5,28.3,-108.9,25.4,-108.6,22.0,-108.5,18.4,-108.4,15.1,-108.3,11.9,-108.0,8.6,-107.6,5.8,-107.3,3.4,-107.0,1.3,-106.7,-0.3,-106.6,-1.5,-106.5,-2.2,-106.5,-2.7,-106.5,-2.9,-106.5,-2.8,-106.5,-2.7,-106.6,-2.7,-106.6,-3.1,-106.8,-4.0,-107.1,-5.3,-107.6,-7.1,-108.5,-9.3,-109.7,-11.9,-111.4,-14.9,-113.6,-18.2,-116.3,-21.7,-119.5,-25.5,-123.3,-29.6,-127.6,-33.7,-132.4,-37.9,-137.8,-42.1,-143.7,-45.8,-150.1,-48.8,-156.9,-51.4,-164.0,-53.4,-171.4,-54.5,-179.0,-54.6,-186.8,-53.7,-194.5,-51.8,-202.2,-49.0,-209.8,-45.7,-217.1,-41.6,-224.3,-36.9,-231.1,-31.7,-237.5,-26.1,-243.5,-20.0,-249.0,-6.6,-258.4,0.9,-262.2,8.8,-265.4,17.0,-267.8,25.4,-269.4,33.7,-270.3,50.1,-269.9,58.3,-268.7,66.4,-266.7,74.6,-264.0,82.8,-260.6,90.8,-256.9,99.1,-252.0,106.8,-246.7,113.4,-241.3,119.0,-235.9,123.6,-230.6,127.0,-225.6,128.5,-220.8,128.7,-215.8,127.9,-210.8,126.4,-205.4,124.1,-199.8,121.1,-194.2,116.8,-188.8,111.2,-183.8,104.6,-178.7,96.6,-174.4,88.2,-170.1,80.5,-165.4,73.0,-160.4,66.4,-154.7,60.8,-148.4,56.5,-141.7,52.6,-135.2,48.4,-129.1,43.7,-123.7,38.5,-118.9,33.1,-114.6,27.8,-110.8,23.1,-107.3,19.0,-104.3,15.4,-101.8,12.1,-99.9,8.7,-98.8,5.7,-98.0,2.4,-98.1,-1.3,-98.8,-4.9,-100.1,-8.0,-101.5,-11.5,-104.3,-11.8,-105.6,-11.4,-106.8,-10.4,-107.8,-9.1,-108.5,-7.5,-109.1,-5.9,-109.4,-3.9,-109.7,-1.1,-110.0,3.2,-110.1,8.7,-110.6,15.2,-111.4,22.4,-112.5,30.0,-113.7,38.0,-115.2,46.2,-116.7)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'W', new Array(-19,-129,-19,-130,-19,-131,-19,-132,-20,-133,-22,-135,-23,-136,-25,-138,-27,-140,-29,-143,-30,-146,-32,-150,-33,-154,-33,-158,-34,-162,-34,-166,-34,-169,-34,-173,-34,-176,-35,-178,-35,-180,-35,-181,-35,-182,-34,-182,-32,-181,-30,-180,-27,-177,-23,-174,-19,-171,-16,-167,-12,-162,-8,-157,-5,-153,-2,-148,1,-142,3,-139,5,-138,6,-138,7,-138,8,-140,9,-142,9,-144,9,-148,9,-151,9,-155,9,-159,8,-163,7,-167,6,-171,6,-175,5,-178,6,-181,8,-183,11,-185,14,-186,17,-187,20,-186,22,-185,23,-183,24,-180,25,-177,26,-172,27,-167,29,-162,31,-157,34,-151,37,-146,38,-141,40,-137,41,-133,42,-130,43,-128,44,-126,46,-125,47,-124,48,-124,49,-125,50,-126,50,-127,49,-128,49,-130,48,-131,46,-133,45,-134,44,-135,43,-135,43,-135,42,-135,42,-135,42,-135,42,-135)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'M', new Array(-49,-189,-50,-189,-50,-189,-51,-188,-51,-188,-52,-188,-52,-188,-52,-188,-52,-188,-51,-188,-51,-188,-50,-188,-50,-188,-50,-189,-49,-189,-49,-189,-49,-189,-49,-189,-49,-188,-50,-188,-50,-187,-51,-186,-51,-185,-51,-182,-50,-180,-50,-177,-49,-173,-48,-169,-47,-164,-45,-160,-44,-155,-42,-151,-40,-147,-37,-143,-35,-140,-33,-137,-32,-135,-31,-133,-30,-132,-29,-132,-28,-132,-27,-133,-27,-134,-26,-135,-26,-137,-26,-139,-26,-142,-25,-145,-25,-148,-24,-152,-24,-156,-23,-161,-22,-165,-21,-170,-20,-174,-18,-178,-17,-182,-15,-185,-13,-188,-12,-190,-10,-191,-9,-192,-8,-191,-8,-190,-8,-187,-9,-184,-9,-181,-10,-176,-10,-172,-10,-167,-10,-162,-9,-157,-8,-153,-7,-149,-5,-145,-2,-143,1,-140,3,-139,5,-140,5,-141,6,-143,5,-146,5,-149,4,-152,4,-156,4,-161,4,-165,5,-169,6,-174,8,-178,10,-182,13,-186,15,-189,18,-192,20,-195,21,-197,23,-198,24,-199,24,-199,24,-199,24,-198,24,-197,23,-197,22,-196)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'X', new Array(-21,-139,-21,-139,-22,-139,-22,-138,-23,-138,-24,-138,-24,-138,-25,-138,-26,-138,-27,-138,-27,-138,-27,-139,-26,-140,-25,-142,-24,-144,-23,-147,-23,-149,-22,-152,-22,-155,-22,-158,-22,-161,-22,-165,-21,-168,-21,-171,-21,-174,-21,-177,-21,-180,-21,-183,-21,-186,-20,-189,-19,-191,-17,-194,-14,-196,-12,-198,-9,-199,-7,-200,-6,-201,-5,-201,-4,-201,-3,-201,-2,-200,-1,-199,3,-194,6,-191,10,-187,14,-183,19,-179,22,-174,26,-169,28,-165,29,-160,31,-157,31,-153,31,-151,31,-149,29,-148,27,-148,23,-148,18,-149,13,-151,6,-153,-6,-159,-13,-163,-19,-166,-25,-171,-29,-175,-34,-179,-37,-183,-40,-187,-43,-190,-45,-193,-47,-195,-50,-197,-52,-198,-54,-198,-56,-198,-58,-197,-59,-196,-60,-195,-61,-194,-61,-193,-60,-192,-60,-191,-59,-191,-58,-190,-57,-190,-56,-190,-55,-190,-54,-190,-53,-190,-53,-190,-52,-190,-51,-191,-51,-191,-50,-191,-50,-191)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'P', new Array(-28,-216,-27,-217,-27,-217,-27,-218,-26,-218,-26,-218,-26,-218,-25,-218,-25,-217,-25,-217,-25,-217,-25,-217,-26,-216,-26,-216,-26,-215,-26,-214,-27,-213,-27,-211,-27,-209,-27,-207,-28,-204,-29,-201,-30,-197,-30,-194,-30,-189,-30,-185,-29,-181,-28,-177,-26,-172,-25,-168,-24,-164,-22,-160,-21,-156,-20,-152,-18,-149,-17,-145,-16,-142,-14,-140,-13,-137,-12,-135,-11,-132,-9,-130,-8,-129,-7,-127,-5,-126,-2,-125,3,-125,6,-125,10,-126,13,-127,16,-128,19,-130,22,-133,25,-135,27,-138,29,-141,31,-144,32,-148,32,-151,32,-154,32,-158,30,-161,28,-163,25,-166,21,-168,16,-169,10,-170,4,-171,-2,-171,-8,-171,-14,-171,-19,-170,-24,-169,-28,-168,-31,-168,-33,-167,-35,-166,-36,-165,-36,-165,-35,-165,-34,-165,-33,-164,-32,-165,-31,-165,-29,-165,-28,-165,-27,-165,-25,-165,-24,-165,-23,-165,-21,-166,-21,-166,-20,-166,-20,-166,-20,-166,-21,-166,-21,-166)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'S', new Array(16,-117,15,-117,15,-117,15,-117,16,-117,17,-117,19,-117,20,-116,21,-116,21,-116,20,-116,18,-116,16,-116,14,-116,11,-116,8,-116,5,-116,1,-117,-3,-118,-8,-118,-14,-119,-20,-121,-26,-122,-32,-124,-37,-126,-41,-129,-45,-131,-47,-134,-49,-137,-51,-140,-52,-142,-52,-145,-52,-148,-51,-150,-49,-152,-47,-154,-43,-157,-39,-159,-34,-161,-29,-163,-22,-165,-16,-166,-10,-168,-3,-170,2,-173,8,-175,14,-177,19,-179,24,-182,28,-184,32,-187,34,-189,35,-192,35,-195,33,-197,29,-199,25,-201,19,-203,14,-205,9,-206,4,-207,-3,-208,-7,-208,-12,-207,-17,-206,-23,-205,-29,-203,-34,-202,-40,-200,-45,-199,-49,-198,-52,-197,-54,-196,-55,-196,-55,-196,-55,-196,-54,-196,-53,-196,-52,-197,-50,-197)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'A', new Array(8,-123,10,-123,12,-123,14,-122,15,-122,15,-121,14,-121,12,-121,8,-121,4,-121,-5,-123,-11,-125,-16,-127,-22,-129,-27,-132,-32,-136,-37,-139,-41,-143,-44,-147,-47,-151,-50,-155,-52,-159,-54,-162,-54,-166,-54,-168,-52,-171,-50,-173,-47,-174,-44,-175,-39,-175,-35,-174,-30,-173,-25,-171,-19,-168,-14,-165,-9,-161,-5,-157,-1,-153,2,-148,5,-144,7,-140,9,-137,9,-134,9,-131,8,-130,6,-129,5,-128,4,-129,3,-130,3,-132,3,-135,3,-138,4,-141,4,-144,4,-148,4,-152,3,-156,3,-159,3,-163,4,-166,5,-169,6,-172,8,-174,10,-176,12,-178,14,-180,15,-181,17,-182,18,-182,19,-183,20,-183,21,-183,21,-183,21,-183,22,-183,22,-182)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'B', new Array(-21,-214,-20,-214,-19,-214,-19,-214,-19,-214,-19,-214,-19,-213,-20,-213,-20,-212,-20,-212,-20,-211,-20,-210,-19,-208,-18,-207,-17,-205,-15,-202,-15,-200,-14,-197,-15,-193,-16,-190,-17,-186,-18,-183,-20,-179,-21,-175,-22,-171,-22,-168,-23,-164,-23,-161,-22,-158,-22,-154,-21,-151,-20,-148,-20,-146,-19,-143,-19,-140,-19,-138,-19,-136,-18,-134,-18,-132,-18,-130,-17,-129,-17,-127,-16,-126,-14,-125,-13,-124,-11,-124,-9,-123,-8,-122,-6,-121,-4,-121,-1,-121,4,-122,7,-123,11,-124,15,-125,18,-127,21,-128,24,-130,26,-133,27,-135,28,-138,27,-140,26,-143,25,-146,22,-148,19,-151,15,-153,10,-155,5,-156,-5,-159,-11,-160,-15,-160,-19,-161,-23,-161,-24,-161,-25,-161,-24,-162,-22,-162,-19,-162,-16,-162,-13,-163,-10,-163,-7,-163,-3,-164,2,-166,5,-167,8,-168,11,-170,15,-172,19,-174,22,-177,25,-179,27,-182,28,-184,28,-187,26,-189,24,-192,21,-194,17,-196,13,-198,9,-199,6,-201,2,-202,-2,-203,-6,-203,-12,-203,-17,-203,-22,-203,-27,-203,-32,-203,-35,-203,-38,-202,-40,-202,-41,-202,-41,-202,-41,-202,-40,-202,-39,-201,-37,-201,-36,-201)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'C', new Array(23,-119,21,-119,20,-119,18,-119,17,-119,16,-120,13,-120,10,-121,5,-122,-5,-124,-11,-125,-18,-127,-24,-129,-30,-131,-36,-133,-41,-135,-45,-138,-49,-141,-52,-145,-55,-148,-57,-151,-58,-155,-59,-158,-59,-162,-59,-166,-59,-169,-58,-172,-57,-176,-56,-179,-55,-182,-53,-185,-51,-188,-49,-191,-45,-194,-41,-196,-36,-199,-31,-201,-25,-203,-19,-205,-13,-206,-7,-207,-2,-208,3,-208,7,-208,12,-208,16,-208,20,-207,25,-207,29,-206,33,-205,36,-204,39,-203,40,-203,41,-202,41,-202,40,-202,39,-202,38,-202,36,-202,35,-202,33,-202,32,-202,31,-202,30,-202,29,-202,29,-203,28,-203,28,-203,28,-203)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'D', new Array(-24,-171,-24,-171,-24,-171,-24,-170,-24,-170,-25,-169,-26,-168,-28,-167,-31,-167,-34,-167,-37,-167,-40,-168,-44,-169,-47,-170,-50,-172,-52,-175,-54,-178,-55,-181,-56,-184,-55,-187,-54,-191,-53,-193,-51,-195,-49,-196,-46,-197,-44,-196,-41,-195,-38,-193,-34,-190,-31,-186,-28,-182,-25,-177,-21,-172,-18,-167,-15,-162,-13,-157,-11,-152,-9,-147,-7,-143,-6,-140,-5,-136,-4,-133,-4,-131,-5,-129,-5,-128,-6,-128,-7,-128,-8,-129,-9,-131,-10,-133,-11,-136,-12,-140,-13,-143,-14,-147,-16,-152,-17,-156,-19,-160,-20,-165,-21,-169,-22,-173,-23,-177,-24,-181,-24,-185,-23,-189,-23,-192,-21,-195,-20,-197,-18,-199,-17,-201,-16,-203,-16,-204,-15,-204,-15,-205,-15,-204,-15,-204,-16,-203,-17,-203)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'E', new Array(-18,-152,-18,-152,-18,-152,-17,-153,-17,-153,-17,-153,-17,-153,-17,-153,-17,-152,-17,-152,-17,-152,-17,-152,-17,-152,-16,-152,-15,-153,-14,-153,-12,-153,-9,-154,-5,-154,4,-155,10,-154,15,-154,19,-153,23,-152,26,-150,28,-149,29,-147,30,-146,30,-144,30,-142,29,-140,29,-139,28,-137,27,-135,26,-133,24,-132,22,-131,20,-130,17,-130,15,-130,12,-130,9,-130,6,-131,3,-132,-1,-133,-5,-135,-9,-137,-14,-138,-18,-141,-22,-143,-25,-145,-28,-148,-30,-151,-32,-154,-33,-157,-33,-160,-32,-163,-32,-165,-30,-167,-29,-170,-26,-171,-24,-173,-20,-175,-16,-176,-12,-177,-7,-177,-3,-178,3,-178,7,-178,9,-177,11,-177,13,-177,14,-176,14,-176,14,-176,14,-175,13,-175,13,-175)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'F', new Array(13,-120,16,-119,19,-118,21,-118,22,-117,21,-116,19,-116,16,-116,13,-116,9,-116,6,-117,3,-118,-2,-121,-4,-123,-6,-125,-7,-127,-9,-130,-10,-132,-11,-135,-13,-138,-14,-141,-14,-145,-15,-148,-15,-152,-16,-155,-16,-159,-17,-163,-18,-167,-18,-171,-19,-176,-20,-180,-19,-184,-19,-188,-18,-192,-17,-196,-16,-200,-15,-203,-14,-205,-14,-208,-14,-209,-14,-211,-16,-211,-18,-211,-22,-210,-26,-208,-31,-206,-37,-203,-41,-200,-46,-196,-49,-193,-52,-189,-54,-185,-56,-182,-57,-178,-58,-175,-59,-172,-60,-170,-60,-167,-59,-166,-58,-164,-56,-163,-54,-163,-51,-162,-48,-162,-44,-162,-39,-162,-34,-162,-28,-162,-22,-163,-16,-163,-9,-163,-3,-164,3,-164,9,-165,15,-165,21,-166,25,-166,29,-166,31,-167,32,-167,32,-167,32,-167,31,-167,30,-168,28,-168,27,-168,26,-167,25,-167,25,-167,25,-166,25,-166,25,-166,24,-166)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'G', new Array(20,-122,22,-122,23,-122,25,-122,26,-121,28,-121,28,-120,28,-118,27,-117,26,-116,23,-116,19,-115,14,-115,9,-115,4,-115,-3,-118,-6,-119,-8,-121,-10,-123,-12,-125,-13,-128,-14,-131,-15,-133,-15,-136,-16,-139,-16,-142,-16,-145,-16,-147,-15,-150,-14,-152,-12,-154,-9,-155,-6,-156,-2,-156,1,-155,6,-154,10,-151,14,-148,18,-145,21,-141,24,-137,26,-134,28,-130,29,-126,29,-123,28,-120,27,-118,26,-117,24,-116,22,-116,20,-116,19,-117,18,-119,18,-121,18,-123,18,-126,19,-129,20,-132,21,-136,22,-139,23,-144,23,-148,24,-152,24,-156,24,-160,24,-165,24,-169,24,-173,24,-176,24,-180,23,-183,23,-187,22,-190,21,-192,20,-195,19,-197,17,-199,15,-201,12,-202,8,-204,4,-205,-4,-206,-9,-207,-14,-206,-19,-205,-23,-204,-27,-203,-31,-201,-34,-199,-36,-197,-38,-194,-39,-192,-39,-190,-40,-189,-39,-187,-38,-185,-37,-184,-35,-183,-33,-182,-31,-180,-28,-179,-26,-179,-23,-178,-21,-177,-19,-176,-17,-176,-16,-175,-16,-174,-16,-174,-17,-174,-17,-174,-18,-174,-19,-174)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'H', new Array(-5,-118,-7,-120,-10,-121,-11,-123,-13,-125,-15,-128,-16,-130,-17,-133,-18,-136,-19,-139,-20,-142,-20,-145,-21,-148,-22,-152,-23,-155,-24,-158,-25,-161,-26,-165,-28,-168,-29,-171,-30,-174,-31,-177,-31,-180,-31,-183,-31,-186,-31,-189,-30,-191,-29,-193,-28,-195,-28,-196,-27,-196,-27,-196,-26,-196,-26,-194,-26,-193,-27,-191,-27,-188,-28,-185,-29,-181,-30,-178,-30,-174,-30,-170,-30,-166,-29,-163,-27,-159,-26,-156,-24,-153,-22,-151,-20,-149,-17,-147,-15,-146,-12,-146,-9,-146,-6,-147,-3,-148,-1,-150,1,-152,3,-154,5,-157,7,-160,9,-163,10,-166,11,-169,12,-173,13,-176,13,-180,14,-184,16,-187,17,-190,19,-193,21,-196,22,-199,24,-201,26,-202,29,-203,32,-203,35,-203,37,-203,38,-203,38,-203,37,-202,36,-202,34,-202,33,-201,33,-201,32,-201,31,-200,31,-200,31,-200,30,-199,30,-199)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'J', new Array(-25,-114,-22,-114,-19,-114,-16,-114,-13,-114,-10,-113,-5,-113,5,-113,12,-112,20,-112,27,-111,33,-111,38,-110,42,-110,44,-109,45,-109,45,-110,44,-110,43,-110,41,-111,39,-112,36,-112,33,-113,29,-114,25,-115,20,-116,16,-118,11,-119,6,-121,3,-123,-2,-128,-5,-131,-6,-134,-7,-138,-8,-142,-8,-146,-8,-150,-8,-155,-7,-159,-6,-164,-5,-169,-4,-174,-3,-179,-2,-183,-2,-188,-2,-193,-3,-197,-4,-202,-6,-206,-8,-209,-10,-213,-13,-216,-16,-218,-19,-219,-22,-220,-24,-221,-27,-221,-30,-220,-34,-218,-37,-216,-41,-214,-45,-211,-48,-208,-51,-206,-54,-203,-56,-201,-58,-199,-58,-198,-58,-197,-57,-197,-56,-197,-55,-198,-53,-198,-51,-199,-50,-200,-49,-200,-48,-200,-48,-201,-48,-201,-48,-201,-48,-201,-48,-201)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'K', new Array(-1,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-106,-2,-107,-2,-107,-3,-108,-5,-109,-7,-110,-11,-112,-14,-114,-18,-116,-22,-119,-25,-122,-28,-126,-31,-131,-34,-136,-36,-141,-38,-146,-41,-151,-43,-156,-45,-161,-47,-166,-49,-170,-50,-175,-52,-179,-53,-183,-54,-187,-55,-190,-55,-193,-55,-196,-54,-198,-54,-200,-53,-201,-53,-201,-52,-201,-51,-201,-49,-200,-47,-199,-45,-198,-43,-197,-41,-195,-41,-193,-41,-190,-41,-187,-42,-183,-43,-179,-45,-174,-46,-170,-47,-166,-46,-162,-45,-158,-43,-155,-39,-153,-35,-150,-30,-149,-25,-147,-19,-146,-14,-145,-8,-145,-3,-145,1,-146,5,-147,8,-149,11,-151,12,-153,12,-155,11,-158,9,-160,6,-162,2,-164,-2,-166,-7,-167,-13,-168,-18,-168,-24,-169,-29,-169,-34,-169,-37,-170,-40,-170,-41,-170,-41,-171,-40,-172,-38,-172,-35,-174,-33,-175,-29,-176,-25,-178,-21,-180,-16,-182,-11,-184,-6,-186,5,-190,11,-192,17,-193,22,-195,27,-196,32,-197,35,-198,38,-199,40,-200,41,-200,41,-200,40,-200,39,-200,38,-200,36,-200,35,-200,33,-199,32,-199,30,-199,29,-199,28,-199,28,-198,27,-198,27,-198,27,-198,26,-198)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'L', new Array(-8,-127,-10,-129,-12,-130,-15,-132,-17,-133,-19,-136,-21,-138,-23,-141,-25,-144,-26,-147,-28,-150,-30,-153,-32,-157,-34,-161,-36,-164,-39,-168,-41,-171,-44,-175,-47,-178,-50,-182,-53,-185,-54,-189,-56,-192,-56,-196,-55,-200,-54,-204,-53,-207,-52,-210,-51,-212,-51,-213,-50,-214,-50,-214,-50,-214,-50,-214,-49,-213,-48,-212,-47,-211,-45,-210,-42,-209,-38,-209,-34,-208,-29,-208,-24,-208,-18,-208,-11,-208,-4,-208,2,-208,10,-209,17,-209,23,-210,29,-210,34,-211,38,-211,41,-212,43,-212,45,-213,47,-213,47,-213,47,-214,47,-214,47,-214,46,-214,45,-214)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'M', new Array(-50,-205,-49,-205,-48,-205,-46,-205,-45,-205,-44,-206,-43,-206,-42,-205,-42,-205,-42,-205,-42,-205,-42,-205,-43,-205,-44,-204,-44,-204,-45,-204,-46,-204,-47,-204,-48,-204,-48,-204,-48,-203,-49,-203,-48,-202,-48,-200,-48,-198,-47,-196,-47,-193,-47,-190,-47,-186,-47,-182,-48,-178,-49,-174,-50,-170,-51,-166,-51,-162,-51,-158,-50,-155,-49,-152,-48,-149,-46,-146,-45,-144,-43,-142,-41,-140,-40,-139,-38,-137,-37,-136,-35,-136,-33,-135,-31,-136,-29,-136,-27,-137,-26,-138,-26,-138,-26,-139,-27,-140,-27,-142,-27,-144,-28,-146,-28,-148,-28,-151,-27,-154,-27,-157,-26,-160,-25,-163,-24,-167,-23,-170,-22,-173,-20,-177,-19,-180,-17,-183,-16,-185,-15,-187,-15,-189,-14,-190,-14,-190,-14,-190,-14,-190,-14,-188,-13,-187,-13,-185,-13,-182,-13,-179,-13,-175,-13,-172,-13,-168,-12,-164,-12,-160,-11,-156,-10,-153,-8,-149,-7,-146,-6,-143,-4,-140,-3,-138,-2,-136,-1,-135,-1,-134,-1,-133,1,-135,2,-137,3,-139,4,-142,5,-145,6,-149,8,-152,9,-156,11,-160,13,-164,15,-168,18,-172,20,-177,22,-180,24,-184,26,-188,27,-191,29,-194,30,-196,31,-198,32,-200,33,-202,34,-203,34,-203,34,-204,33,-204,31,-203,30,-203,29,-203,28,-202,27,-201,26,-201,26,-200,26,-200,26,-199,26,-199,26,-198,26,-198)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'N', new Array(-44,-202,-43,-202,-42,-203,-41,-203,-40,-203,-40,-203,-40,-202,-41,-202,-41,-202,-42,-201,-42,-201,-42,-201,-42,-201,-41,-202,-40,-202,-38,-202,-37,-202,-36,-202,-34,-201,-33,-200,-32,-198,-31,-195,-30,-192,-29,-188,-28,-184,-27,-179,-26,-174,-25,-169,-23,-164,-22,-158,-21,-153,-19,-148,-18,-143,-16,-139,-15,-135,-13,-132,-12,-129,-11,-127,-11,-125,-11,-124,-12,-124,-12,-124,-12,-125,-12,-126,-12,-129,-11,-132,-10,-135,-10,-139,-9,-143,-9,-148,-8,-153,-8,-158,-6,-163,-5,-168,-3,-173,1,-184,4,-189,7,-194,10,-198,14,-201,18,-204,22,-206,26,-207,29,-207,31,-206,31,-205,31,-202,30,-199,28,-196,25,-192,23,-187,20,-182,18,-176,16,-171,16,-165,17,-159,19,-153,22,-148,27,-142,32,-137,37,-132,41,-129,45,-125,47,-123,49,-121,49,-120,49,-120,49,-120,48,-120,47,-121,46,-121,46,-122)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'O', new Array(-6,-145,-7,-145,-6,-144,-4,-144,-2,-144,2,-145,4,-145,6,-146,8,-146,9,-146,10,-147,10,-147,10,-147,8,-147,6,-146,3,-146,-4,-145,-7,-144,-11,-144,-14,-143,-17,-143,-21,-143,-25,-144,-29,-145,-33,-146,-37,-147,-40,-149,-44,-151,-47,-154,-50,-157,-53,-160,-55,-163,-56,-167,-57,-170,-58,-174,-57,-178,-57,-182,-55,-186,-53,-190,-50,-194,-46,-197,-41,-201,-36,-204,-30,-207,-23,-209,-16,-211,-9,-213,-3,-214,2,-214,8,-214,14,-213,19,-212,25,-210,31,-207,37,-204,44,-200,49,-197,54,-193,57,-189,57,-185,56,-182,52,-178,48,-175,43,-172,37,-168,32,-165,27,-162,22,-158,17,-156,13,-153,9,-151,5,-149,1,-148,-1,-147,-4,-146,-7,-146,-9,-145,-11,-145,-14,-145,-16,-145,-18,-146,-20,-146,-22,-146,-23,-146,-23,-146,-23,-147,-23,-147,-22,-147,-22,-147)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'P', new Array(-14,-206,-17,-205,-20,-203,-23,-200,-25,-197,-27,-194,-28,-191,-29,-187,-29,-183,-30,-179,-30,-175,-30,-170,-30,-166,-30,-161,-30,-157,-29,-153,-29,-148,-28,-144,-28,-141,-27,-137,-26,-134,-25,-131,-24,-128,-23,-125,-22,-123,-20,-121,-18,-120,-16,-119,-14,-118,-12,-118,-9,-117,-6,-118,-4,-118,-1,-119,1,-119,3,-120,6,-122,8,-123,10,-125,12,-127,13,-129,14,-132,14,-134,13,-137,12,-139,9,-142,6,-144,3,-146,-5,-149,-9,-150,-14,-151,-20,-152,-25,-151,-31,-151,-36,-150,-41,-150,-44,-149,-47,-148,-48,-148,-49,-147,-49,-147,-49,-147,-48,-147,-46,-147,-45,-147,-43,-147,-42,-147,-40,-147,-39,-148,-38,-148,-38,-148,-37,-148,-37,-148,-37,-148,-36,-147)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'Q', new Array(26,-139,26,-139,25,-139,25,-139,24,-139,23,-139,21,-139,19,-139,16,-138,13,-138,11,-137,9,-136,7,-136,6,-135,4,-134,3,-134,1,-134,-1,-135,-5,-135,-10,-137,-15,-138,-21,-140,-26,-143,-31,-145,-35,-148,-39,-152,-42,-155,-44,-158,-46,-161,-46,-164,-46,-167,-45,-169,-43,-171,-40,-173,-36,-173,-32,-174,-27,-173,-22,-172,-17,-170,-12,-167,-7,-164,-2,-160,2,-156,6,-153,8,-149,10,-146,11,-144,11,-143,10,-142,9,-142,8,-143,7,-144,6,-146,6,-148,5,-151,5,-155,4,-158,3,-162,1,-166,-1,-174,-3,-178,-4,-183,-6,-187,-7,-191,-8,-195,-9,-199,-9,-204,-8,-208,-7,-211,-6,-215,-5,-218,-4,-221,-3,-223,-3,-225,-3,-226,-3,-227,-4,-227,-5,-227,-6,-226,-7,-226,-7,-225,-7,-224,-6,-223,-5,-222,-5,-222,-4,-221,-3,-221,-3,-221,-2,-220,-2,-220,-2,-220)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'R', new Array(-44,-217,-43,-218,-41,-219,-40,-219,-40,-219,-40,-219,-41,-219,-42,-218,-42,-218,-43,-218,-43,-217,-43,-217,-43,-217,-43,-217,-43,-217,-42,-217,-41,-217,-40,-217,-40,-217,-39,-217,-39,-216,-38,-215,-39,-214,-40,-212,-41,-209,-42,-207,-42,-204,-42,-200,-42,-196,-42,-193,-42,-189,-42,-184,-42,-180,-43,-176,-43,-171,-43,-167,-43,-164,-43,-160,-42,-156,-42,-153,-41,-150,-40,-148,-39,-145,-37,-143,-36,-140,-35,-138,-33,-136,-32,-134,-31,-133,-29,-131,-28,-130,-26,-129,-24,-128,-21,-127,-19,-127,-16,-126,-13,-126,-10,-127,-7,-127,-4,-128,-1,-129,2,-133,3,-135,4,-137,5,-139,4,-142,4,-145,3,-147,1,-150,-1,-152,-4,-154,-8,-156,-12,-157,-17,-159,-22,-160,-27,-161,-31,-161,-36,-162,-40,-162,-43,-163,-45,-163,-47,-164,-47,-165,-47,-166,-45,-167,-42,-169,-39,-170,-35,-172,-31,-174,-26,-176,-21,-178,-16,-180,-12,-182,-7,-184,-2,-186,1,-188,5,-190,10,-192,14,-194,19,-196,24,-197,28,-199,32,-200,35,-201,37,-203,37,-204,37,-205,37,-206,37,-207,36,-208,35,-208,34,-209,33,-209,32,-209,30,-210,29,-210,27,-210,26,-209,25,-209,24,-209,23,-209,22,-209,22,-209,22,-208,23,-208,23,-208)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'S', new Array(41,-114,38,-115,34,-115,30,-116,26,-116,21,-116,17,-116,11,-116,6,-115,-3,-116,-7,-116,-11,-117,-14,-119,-16,-120,-18,-122,-20,-124,-22,-126,-24,-128,-26,-130,-28,-132,-29,-135,-30,-137,-30,-139,-30,-142,-29,-144,-27,-146,-25,-148,-22,-150,-19,-152,-15,-154,-11,-156,-7,-158,-3,-160,4,-164,8,-166,11,-169,15,-172,18,-174,20,-177,22,-180,24,-183,24,-185,24,-188,23,-190,21,-192,18,-194,15,-196,10,-198,6,-199,2,-200,-2,-200,-6,-201,-11,-201,-15,-200,-20,-200,-24,-199,-29,-198,-33,-196,-37,-195,-41,-194,-45,-192,-48,-191,-51,-190,-53,-189,-55,-188,-56,-187,-56,-187,-56,-187,-56,-187,-55,-187,-55,-186,-55,-186)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'T', new Array(-42,-136,-42,-136,-41,-136,-40,-137,-40,-137,-39,-137,-38,-137,-37,-138,-36,-138,-35,-138,-34,-139,-33,-139,-31,-139,-28,-140,-25,-140,-21,-141,-17,-141,-13,-141,-10,-141,-7,-140,-4,-140,-2,-139,3,-138,5,-137,8,-137,12,-136,15,-135,19,-134,22,-133,26,-132,29,-130,31,-129,33,-127,35,-125,36,-123,36,-120,36,-118,35,-116,33,-115,30,-113,27,-112,24,-112,19,-111,15,-112,12,-112,9,-113,6,-115,3,-117,1,-119,-2,-125,-5,-128,-7,-132,-9,-135,-11,-139,-13,-143,-15,-148,-16,-152,-18,-156,-19,-160,-19,-165,-19,-169,-18,-172,-17,-176,-15,-178,-13,-181,-9,-183,-5,-184,5,-186,10,-186,16,-187,20,-186,24,-186,28,-186,30,-186,32,-186,34,-186,36,-185,37,-185,38,-185,38,-185,38,-184,37,-184,37,-184,36,-184)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'U', new Array(-25,-121,-25,-121,-25,-120,-25,-120,-26,-119,-27,-119,-28,-119,-29,-119,-30,-119,-30,-120,-30,-121,-30,-123,-30,-124,-31,-126,-31,-128,-32,-130,-33,-132,-34,-135,-35,-137,-36,-140,-38,-142,-39,-145,-40,-147,-41,-150,-41,-153,-42,-155,-42,-158,-42,-161,-42,-163,-41,-166,-41,-169,-41,-171,-40,-174,-40,-177,-38,-179,-37,-182,-34,-184,-32,-186,-29,-188,-25,-190,-21,-192,-18,-193,-14,-193,-11,-194,-7,-194,-2,-194,1,-193,6,-193,11,-192,16,-190,20,-189,24,-188,27,-186,29,-185,31,-183,32,-181,32,-179,32,-176,32,-174,32,-171,32,-169,33,-166,34,-163,36,-161,38,-157,40,-154,43,-151,45,-148,47,-146,48,-143,49,-141,50,-139,50,-137,50,-135,50,-134,49,-133,49,-132,48,-132,47,-131,45,-131,43,-132,41,-132,39,-132,37,-132,36,-133,35,-133,35,-133,34,-133,34,-133,35,-133,35,-133)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'V', new Array(-11,-126,-11,-126,-11,-126,-12,-126,-12,-126,-13,-126,-13,-126,-13,-126,-14,-126,-14,-126,-14,-126,-14,-126,-14,-126,-14,-126,-14,-126,-14,-126,-15,-126,-15,-126,-17,-125,-19,-125,-21,-124,-23,-124,-26,-124,-28,-125,-29,-126,-30,-128,-31,-130,-31,-133,-30,-136,-29,-140,-28,-143,-26,-147,-25,-151,-23,-155,-22,-159,-20,-163,-19,-167,-18,-170,-18,-174,-17,-177,-17,-180,-17,-182,-17,-185,-17,-187,-17,-189,-16,-191,-16,-193,-15,-194,-14,-195,-13,-196,-11,-197,-10,-198,-9,-198,-8,-198,-8,-197,-8,-196,-8,-195,-8,-193,-8,-191,-7,-188,-7,-185,-5,-182,-4,-178,-1,-174,1,-169,4,-165,8,-160,12,-156,16,-151,19,-147,22,-143,25,-139,27,-135,30,-132,32,-129,34,-126,36,-124,38,-122,40,-121,42,-120,44,-119,46,-118,48,-117,50,-117,51,-117,52,-117,53,-117,53,-118,53,-118,53,-118,53,-119)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'W', new Array(-20,-133,-18,-134,-18,-134,-17,-135,-17,-135,-18,-135,-18,-135,-20,-135,-22,-134,-24,-134,-27,-134,-29,-133,-32,-133,-34,-134,-36,-135,-38,-137,-40,-139,-41,-141,-43,-144,-44,-147,-45,-151,-46,-155,-46,-159,-46,-164,-47,-168,-47,-173,-46,-177,-46,-182,-44,-186,-43,-190,-42,-194,-40,-197,-39,-199,-38,-201,-38,-202,-37,-203,-36,-202,-35,-201,-33,-199,-32,-197,-31,-193,-29,-190,-28,-185,-26,-180,-24,-176,-23,-171,-21,-166,-19,-161,-18,-157,-16,-153,-14,-150,-13,-148,-12,-146,-11,-145,-10,-145,-10,-146,-9,-147,-9,-149,-9,-151,-10,-154,-10,-158,-10,-161,-11,-165,-12,-170,-13,-174,-13,-178,-12,-182,-12,-186,-11,-190,-10,-193,-8,-195,-7,-197,-5,-198,-4,-198,-2,-198,-1,-196,1,-187,2,-182,3,-178,4,-172,7,-167,9,-162,12,-157,14,-152,17,-148,19,-144,21,-140,23,-137,24,-135,25,-133,26,-132,27,-131,28,-130,29,-130,30,-131,31,-131,32,-132,33,-133,34,-134,34,-134,35,-135,35,-136,34,-136,34,-137,34,-137,33,-137)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'X', new Array(-51,-132,-52,-131,-52,-132,-51,-132,-50,-133,-48,-134,-46,-136,-44,-138,-41,-140,-40,-143,-38,-145,-37,-148,-36,-151,-35,-154,-34,-157,-33,-161,-32,-164,-31,-168,-29,-171,-26,-175,-23,-178,-19,-181,-15,-184,-10,-187,-5,-189,4,-193,9,-194,15,-194,19,-193,24,-192,27,-191,30,-189,32,-186,34,-182,37,-178,40,-174,43,-169,45,-164,47,-160,49,-155,50,-151,50,-148,50,-145,49,-143,48,-142,45,-141,42,-142,38,-143,33,-145,28,-148,23,-151,17,-155,12,-159,6,-164,-5,-173,-11,-178,-17,-182,-24,-186,-31,-190,-37,-193,-43,-196,-49,-199,-53,-201,-57,-202,-59,-203,-60,-204,-61,-204,-60,-205,-59,-204,-57,-204,-54,-204,-52,-203,-50,-202,-47,-202,-46,-201,-44,-201,-43,-201,-41,-200,-41,-200,-40,-200,-39,-200,-39,-200,-39,-200,-39,-200)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'Y', new Array(-5,-109,-7,-109,-8,-110,-9,-111,-10,-113,-11,-114,-12,-117,-14,-119,-15,-122,-16,-125,-16,-129,-17,-132,-18,-136,-18,-140,-18,-143,-18,-146,-18,-149,-17,-152,-17,-153,-15,-154,-14,-154,-11,-154,-7,-153,-3,-151,1,-148,6,-144,11,-140,15,-136,19,-131,23,-126,25,-122,27,-117,28,-114,28,-110,28,-108,28,-106,27,-105,26,-104,25,-105,24,-106,23,-108,22,-111,22,-114,22,-118,22,-122,22,-127,21,-132,20,-137,19,-142,17,-148,15,-154,13,-160,11,-165,9,-170,7,-176,6,-180,5,-185,4,-189,3,-193,1,-196,-2,-201,-4,-202,-7,-204,-10,-204,-12,-204,-14,-204,-17,-203,-19,-201,-21,-199,-22,-196,-24,-193,-25,-190,-26,-187,-26,-184,-26,-181,-26,-178,-25,-175,-24,-173,-22,-171,-20,-169,-17,-168,-14,-167,-11,-167,-8,-166,-5,-167,-2,-167,-1,-167,1,-169,1,-169,2,-170,1,-170,1,-171,1,-171,1,-171,1,-171)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'Z', new Array(-40,-106,-41,-106,-42,-106,-41,-106,-41,-106,-40,-107,-39,-107,-38,-108,-36,-108,-34,-108,-32,-109,-30,-109,-26,-110,-22,-110,-18,-111,-12,-112,-6,-112,5,-113,11,-114,17,-114,23,-114,27,-114,30,-115,33,-115,35,-116,35,-117,34,-119,33,-121,30,-123,26,-126,21,-129,16,-133,9,-137,1,-140,-7,-144,-16,-148,-26,-151,-35,-155,-44,-157,-51,-160,-58,-162,-63,-163,-66,-164,-68,-165,-68,-165,-68,-165,-65,-164,-61,-164,-56,-163,-50,-163,-44,-163,-36,-162,-29,-162,-21,-162,-13,-162,-5,-162,2,-162,10,-162,17,-162,23,-162,29,-163,33,-163,37,-163,40,-163,42,-162,43,-162,44,-162,44,-162,44,-162,44,-162,43,-161,43,-161)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'P', new Array(-61,-111,-60,-110,-57,-110,-55,-110,-53,-111,-52,-111,-51,-111,-49,-111,-46,-111,-44,-111,-41,-110,-38,-108,-34,-107,-29,-106,-22,-105,-15,-104,-9,-103,-2,-103,4,-103,11,-103,18,-105,25,-107,31,-109,37,-113,42,-117,45,-123,48,-130,48,-137,47,-144,44,-151,39,-157,34,-162,28,-166,22,-169,16,-171,9,-171,1,-170,-6,-168,-15,-165,-23,-161,-30,-156,-37,-151,-42,-145,-46,-139,-49,-133,-51,-127,-52,-121,-52,-115,-50,-111,-48,-107,-45,-103,-43,-101,-40,-100,-38,-100,-35,-102,-34,-104,-34,-107,-35,-112,-36,-117,-36,-123,-37,-130,-39,-137,-41,-145,-43,-153,-44,-161,-46,-170,-47,-178,-48,-186,-49,-194,-50,-202,-50,-210,-50,-217,-50,-224,-50,-230,-51,-234,-52,-238,-53,-241,-51,-244,-48,-247,-45,-249,-42,-251,-41,-251,-40,-251,-40,-250,-40,-249,-40,-247,-41,-246,-41,-244,-42,-243,-42,-242,-43,-241,-43,-241,-43,-240,-43,-240,-42,-240,-42,-240,-42,-240,-43,-240,-43,-240,-44,-240,-44,-240,-44,-240)));
	this.Unistrokes.push(ConvertCoordinate2Unistroke(40, 'X', new Array(45,-99,49,-97,51,-97,51,-98,50,-100,48,-102,46,-105,43,-109,39,-113,34,-118,29,-123,22,-129,15,-136,7,-142,-7,-156,-15,-163,-22,-169,-30,-174,-37,-178,-43,-181,-49,-183,-55,-184,-61,-182,-67,-180,-71,-176,-74,-172,-77,-166,-79,-159,-82,-151,-83,-143,-83,-135,-81,-129,-78,-123,-74,-119,-71,-116,-67,-114,-61,-114,-54,-117,-47,-121,-39,-127,-31,-134,-22,-141,-13,-150,-2,-159,8,-170,18,-181,30,-193,42,-205,56,-219,71,-233,84,-249)));






	
	this.Recognize = function(points, useProtractor)
	{
		// console.log(points)
		points = Resample(points, NumPoints);
		//console.log(BoundingBox(points))
		points = ScaleTo(points, SquareSize);
		points = TranslateTo(points, Origin);

		var vector = Vectorize(points); // for Protractor

		var d_min = +Infinity;
		var gest_out = -1;
		var outputStruct = [];
		var gestureName = 'NA';
		for(var i = 0; i < this.Unistrokes.length; i++)
		{
			
			//var dis = calculateDistance(points, this.Unistrokes[i].Points);
			var dis = calculateDtwDistance(points, this.Unistrokes[i].Points);
			// var dis = calculateDtwDistance(this.convert2Degree(points), this.convert2Degree(this.Unistrokes[i].Points));
			console.log(this.Unistrokes[i].Name +': ' + dis)

			if( dis < d_min && dis < this.Unistrokes[i].Threshold){
				d_min = dis;
				gest_out = i;
			}
			outputStruct.push({Name:this.Unistrokes[i].Name, Cost: dis});
		}

		if(gest_out > -1){
			gestureName = this.Unistrokes[gest_out].Name;
		}

		console.log('Recognized Gesture: ', gestureName);
		// ble.displayStatus('Recognized Gesture: ' + gestureName);
		return gestureName;

	};

	this.transformPoints = function(points)
	{
		points = Resample(points, NumPoints);
		points = ScaleTo(points, SquareSize);
		points = TranslateTo(points, Origin);
		return points;
	}

	this.returnTemplatePoints = function(index){
		return this.Unistrokes[index].Points;
	}

	this.returnTemplateName = function(index){
		return this.Unistrokes[index].Name;
	}

	this.AddGesture = function(name, points)
	{
		this.Unistrokes[this.Unistrokes.length] = new Unistroke(name, points); // append new unistroke
		var num = 0;
		for (var i = 0; i < this.Unistrokes.length; i++) {
			if (this.Unistrokes[i].Name == name)
				num++;
		}
		return num;
	}
	this.DeleteUserGestures = function()
	{
		this.Unistrokes.length = NumUnistrokes; // clear any beyond the original set
		return NumUnistrokes;
	};
	this.convert2Degree = function(points){
		var degrees = [];
		for(var i = 0; i < points.length - 1; i++){
			degrees.push(Math.atan((points[i+1].Y - points[i].Y) / (points[i+1].X - points[i].X)) * 180 / Math.PI);
		}
		return degrees;
	}
}

function calculateDistance(points, template){
	var distance = 0;
	for(var i = 0; i < points.length; i++){
		distance += Math.abs(points[i].X - template[i].X) + Math.abs(points[i].Y - template[i].Y);
	}
	return distance;
}

function calculateDtwDistance(points, template){

	var result = getDTW(points, template);
	return result.cost;
}

function ConvertCoordinate2Unistroke(threshold, unistrokeName, coordinates){
	var points = [];
	if(coordinates.length % 2 == 0){
		for(var i = 0; i < coordinates.length; i+=2){
			points.push(new Point(coordinates[i], coordinates[i+1]));
		}
	}
	points = Resample(points, NumPoints);
	points = ScaleTo(points, SquareSize);
	points = TranslateTo(points, Origin);
	//console.log(points);
	return new Unistroke(threshold, unistrokeName, points);
}
//
// Private helper functions from this point down
//
function Resample(points, n)
{
	var I = PathLength(points) / (n - 1); // interval length
	var D = 0.0;
	var newpoints = new Array(points[0]);
	for (var i = 1; i < points.length; i++)
	{
		var d = Distance(points[i - 1], points[i]);
		if ((D + d) >= I)
		{
			var qx = points[i - 1].X + ((I - D) / d) * (points[i].X - points[i - 1].X);
			var qy = points[i - 1].Y + ((I - D) / d) * (points[i].Y - points[i - 1].Y);
			var q = new Point(qx, qy);
			newpoints[newpoints.length] = q; // append new point 'q'
			points.splice(i, 0, q); // insert 'q' at position i in points s.t. 'q' will be the next i
			D = 0.0;
		}
		else D += d;
	}
	if (newpoints.length == n - 1) // somtimes we fall a rounding-error short of adding the last point, so add it if so
		newpoints[newpoints.length] = new Point(points[points.length - 1].X, points[points.length - 1].Y);
	return newpoints;
}
function IndicativeAngle(points)
{
	var c = Centroid(points);
	return Math.atan2(c.Y - points[0].Y, c.X - points[0].X);
}
function RotateBy(points, radians) // rotates points around centroid
{
	var c = Centroid(points);
	var cos = Math.cos(radians);
	var sin = Math.sin(radians);
	var newpoints = new Array();
	for (var i = 0; i < points.length; i++) {
		var qx = (points[i].X - c.X) * cos - (points[i].Y - c.Y) * sin + c.X
		var qy = (points[i].X - c.X) * sin + (points[i].Y - c.Y) * cos + c.Y;
		newpoints[newpoints.length] = new Point(qx, qy);
	}
	return newpoints;
}

function ScaleTo(points, size) // non-uniform scale; assumes 2D gestures (i.e., no lines)
{
	var B = BoundingBox(points);
	var newpoints = new Array();
	for (var i = 0; i < points.length; i++) {
		var qx = points[i].X * (size / B.Width);
		var qy = points[i].Y * (size / B.Height);
		newpoints[newpoints.length] = new Point(qx, qy);
	}
	return newpoints;
}

function TranslateTo(points, pt) // translates points' centroid
{
	var c = Centroid(points);
	var newpoints = new Array();
	for (var i = 0; i < points.length; i++) {
		var qx = points[i].X + pt.X - c.X;
		var qy = points[i].Y + pt.Y - c.Y;
		newpoints[newpoints.length] = new Point(qx, qy);
	}
	return newpoints;
}
function Vectorize(points) // for Protractor
{
	var sum = 0.0;
	var vector = new Array();
	for (var i = 0; i < points.length; i++) {
		vector[vector.length] = points[i].X;
		vector[vector.length] = points[i].Y;
		sum += points[i].X * points[i].X + points[i].Y * points[i].Y;
	}
	var magnitude = Math.sqrt(sum);
	for (var i = 0; i < vector.length; i++)
		vector[i] /= magnitude;
	return vector;
}
function OptimalCosineDistance(v1, v2) // for Protractor
{
	var a = 0.0;
	var b = 0.0;
	for (var i = 0; i < v1.length; i += 2) {
		a += v1[i] * v2[i] + v1[i + 1] * v2[i + 1];
                b += v1[i] * v2[i + 1] - v1[i + 1] * v2[i];
	}
	var angle = Math.atan(b / a);
	return Math.acos(a * Math.cos(angle) + b * Math.sin(angle));
}
function DistanceAtBestAngle(points, T, a, b, threshold)
{
	var x1 = Phi * a + (1.0 - Phi) * b;
	var f1 = DistanceAtAngle(points, T, x1);
	var x2 = (1.0 - Phi) * a + Phi * b;
	var f2 = DistanceAtAngle(points, T, x2);
	while (Math.abs(b - a) > threshold)
	{
		if (f1 < f2) {
			b = x2;
			x2 = x1;
			f2 = f1;
			x1 = Phi * a + (1.0 - Phi) * b;
			f1 = DistanceAtAngle(points, T, x1);
		} else {
			a = x1;
			x1 = x2;
			f1 = f2;
			x2 = (1.0 - Phi) * a + Phi * b;
			f2 = DistanceAtAngle(points, T, x2);
		}
	}
	return Math.min(f1, f2);
}
function DistanceAtAngle(points, T, radians)
{
	var newpoints = RotateBy(points, radians);
	return PathDistance(newpoints, T.Points);
}
function Centroid(points)
{
	var x = 0.0, y = 0.0;
	for (var i = 0; i < points.length; i++) {
		x += points[i].X;
		y += points[i].Y;
	}
	x /= points.length;
	y /= points.length;
	return new Point(x, y);
}
function BoundingBox(points)
{
	var minX = +Infinity, maxX = -Infinity, minY = +Infinity, maxY = -Infinity;
	for (var i = 0; i < points.length; i++) {
		minX = Math.min(minX, points[i].X);
		minY = Math.min(minY, points[i].Y);
		maxX = Math.max(maxX, points[i].X);
		maxY = Math.max(maxY, points[i].Y);
	}
	//return new Rectangle(minX, minY, maxX - minX, maxY - minY);
	return new Rectangle(minX, minY, Math.max(maxX - minX, maxY - minY), Math.max(maxX - minX, maxY - minY));
}
function PathDistance(pts1, pts2)
{
	var d = 0.0;
	for (var i = 0; i < pts1.length; i++) // assumes pts1.length == pts2.length
		d += Distance(pts1[i], pts2[i]);
	return d / pts1.length;
}
function PathLength(points)
{
	var d = 0.0;
	for (var i = 1; i < points.length; i++)
		d += Distance(points[i - 1], points[i]);
	return d;
}
function Distance(p1, p2)
{
	var dx = p2.X - p1.X;
	var dy = p2.Y - p1.Y;
	return Math.sqrt(dx * dx + dy * dy);
}
function Deg2Rad(d) { return (d * Math.PI / 180.0); }

function convert2Array(points){
	a = [];
	for (var i = 0; i < points.length; i++){
		a.push(points[i].X);
		a.push(points[i].Y);
	}
	return a.toString();
}

module.exports = new Recognizer();

